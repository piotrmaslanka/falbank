<?php

	/**
	 * libiniapis
	 * 
	 * Contains various API to use with INI files
	 * 
	 * @author Piotr Maślanka
	 * @package techplatform
	 * @subpackage libiniapis
	 */
	 
/**
 * Reads raw configuration from INI file and represents it as a variable
 * @package techplatform
 * @subpackage libiniapis
 */
class APIConfig extends LastErrorImplementation
{
	/**
	 * Houses INI entries as generated by parse_ini_file
	 * @see parse_ini_file()
	 * @var array
	 */
	public $config = array();
	/**
	 * Loads a value from INI file
	 * @param string $file filename
	 * @return bool success 
	 */
	function load($file)
	{
		$this->config = parse_ini_file($file, true);
		if (!$this->config)
		{
			$this->lasterror = 'Cannot read in config file(parse_ini_file() reported negative)';
			return false;
		}
		return true;
	}	
}


/**
 * Reads language info from a INI database and provides easy access
 * @package techplatform
 * @package libiniapis
 */ 
class APILanguage extends LastErrorImplementation
{
	/**
	 * Stores current language subset name
	 * @var string
	 */
	public $mode='';
	/**
	 * Stores current language subset data
	 * @var array
	 */
	public $l = array();
	/**
	 * Returns current language subset name
	 * @return string language subset name
	 */
	function getMode()
	{
		return $this->mode;
	}
	/**
	 * Sets new language subset
	 * @param string $mode new language subset name
	 * @return bool success
	 */
	function setMode($mode)
	{
		if (empty($this->table[$mode]))
		{
			$this->lasterror = "Language mode change failed: incorrect mode(tried to set $mode)";
			return false;
		}
		$this->l = $this->table[$mode];
		$this->mode = $mode;
		return true;
	}
	/**
	 * Loads a language database
	 * @param $file language database INI file
	 * @return bool success
	 */
	function load($file)
	{
		$this->table = parse_ini_file($file, true);
		if (!$this->table)
		{
			$this->lasterror = 'Failure loading language file(parse_ini_file()==false)';
			return false;
		}
		
		$this->id = $this->table['LangDefs']['short'];
		$this->name = $this->table['LangDefs']['name'];
		$this->natname = $this->table['LangDefs']['natname'];
		
		if (empty($this->id) || empty($this->name) || empty($this->natname))
		{
			unset($this->table);
			$this->lasterror = 'Language file incorrect (LangDefs section broken)';
			return false;
		} 
		
		foreach ($this->table as $section_name => $section_value)
		{
			foreach ($section_value as $subsection_name => $subsection_value)
			{
				$this->table[$section_name][$subsection_name] = str_replace('\n',"\n",$subsection_value);
							// some delicate reparsing for each string, put other things there as needed
			}
		}
		
		$this->setMode('LangDefs');
		return true;
	}
}

/**
 * Class storing quick graphics display info
 * @package techplatform
 * @subpackage libiniapis
 */
class APIGraphics extends LastErrorImplementation
{
	/**
	 * Gets a XHTMLImage class by specified data
	 * @param string $name image ID
	 * @param string $class XHTML class
	 * @param string $id XHTML id
	 * @param string $special XHTML specials
	 * @return bool success
	 */
	function getXHTMLImage($name, $class='', $id='', $special=array())
	{
		$imgd = $this->getImage($name);
		if (!$imgd) return false;
		return new XHTMLImage($imgd[0], $imgd[1], $class, $id, $special);
	}
	/**
	 * Returns a array with image parameters
	 * @param string $name image ID
	 * @return array Element 1: Image src, Element 2: Image ale
	 */
	function getImage($name)
	{
		if (empty($this->table[$name]))
		{
			$this->lasterror = "getImage(): incorrect image name(tried to get $mode)";
			return false;
		}
		return array($this->table[$name]['src'], $this->table[$name]['alt']);
	}
	/**
	 * Loads graphic info from INI file
	 * @param $file filename
	 * @return bool success
	 */
	function load($file)
	{
		$this->table = parse_ini_file($file, true);
		if (!$this->table)
		{
			$this->lasterror = 'Failure loading graphics repo file(parse_ini_file()==false)';
			return false;
		}
		return true;
	}
}
?>